# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WJ5ZBZO3nP3IqZuYQ463fwD520oLOjCm

# Лабораторная работа №6
"""

celsius = [[-67.0],[-34.0],[0],[34.0],[54.0],[67.0],[100]]
fahrenheit = [[-88.6],[-29.2],[32.0],[93.2],[129.2],[152.6],[212.0]]

import matplotlib.pyplot as plt
plt.figure(figsize=(15,8), dpi=50)
plt.scatter(celsius, fahrenheit, label='входные значения', color='green', marker='$f$');
plt.xlabel('celsius')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(celsius, fahrenheit):
  print(f'цельсия{c}= фаренгейт {f}')

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(celsius, fahrenheit)
lr.predict([[256],[123]])
lr.coef_
lr.intercept_
celsius_test=[[-50],[10],[30],[20],[10],[70],[87]]
fahrenheit_test=lr.predict(celsius_test)
fahrenheit_test

for c,f in zip(celsius_test, fahrenheit_test):
  print(f'цельсия{c}= фаренгейт {f}')

import matplotlib.pyplot as plt
import numpy as np
x_range = np.arange(70,120)
y_range = x_range*1.8+32
plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение')
plt.scatter(celsius,fahrenheit, label='входные данные', color='green')
plt.scatter(celsius_test, fahrenheit_test, label='предсказанное значение',color='blue')
plt.xlabel('Цельсия')
plt.ylabel('Франгейта')
plt.legend()
plt.grid(True)
plt.show()

"""# задания для самостоятельной работы"""

#1 Из фаренгейта в кельвины 
from sklearn.linear_model import LinearRegression as LR
import matplotlib.pyplot as plt
import numpy as np
farengeit = [[-67.0],[-34.0], [0], [34.0], [54.0], [67.0], [100.0]]
kelvin = [[-55.0], [-36.6], [-17.7], [1.1], [12.2], [19.4], [37.7]]
lr = LR()
lr.fit(farengeit, kelvin)
lr.predict([[256], [123]])
lr.coef_
lr.intercept_
farengeit_test = [[-20], [-19.9], [-1.7], [2], [15.7], [20.2], [32.1]]
kelvin_test= lr.predict(farengeit_test)
kelvin_test
for f,k in zip(farengeit_test, kelvin_test):
  print('Фаренгейт', f, '   Кельвин', k)

x_range = np.arange(-20,70)
y_range = (x_range+459.67)*5/9 - 273.2
plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение', linewidth='2')
plt.scatter(farengeit_test, kelvin_test, label='предсказанное значение', color='blue');
plt.xlabel('Фаренгейта')
plt.ylabel('Кельвина')
plt.legend()
plt.grid(True)
plt.show()

#2 https://github.com/Tatyanakoloshinskaya/-.-.--312

#3. График 1
import matplotlib.pyplot as plt
import numpy as np


x = np.arange(-10, 10.01, 0.01)
plt.plot(x, x**2)
plt.show()

#3. График 2
import matplotlib.pyplot as plt
import numpy as np


x = np.arange(-10, 10.01, 0.01)
plt.plot(np.sin(x)**3)

#3. График 3
import matplotlib.pyplot as plt
import numpy as np


x = np.arange(-10, 10.01, 0.01)
plt.plot(np.cos(x)**2)

#4.  Подключите библиотеку math и выведите
import math
print("Число Эйлера e =",math.e)
print("Число Пи =",math.pi)
print("nan =",math.nan)
print("Факториал числа 1! =",math.factorial(5))
print("Наибольший общий делитель =",math.gcd(5, 128))

"""#задания повышенной сложности"""

#2.1. Нарисовать кота
import matplotlib.path
import matplotlib.pyplot as plt


def drawLine(axes):

    x0 = 3
    y0 = 1

    x1 = 2
    y1 = 2

    x2 = 2
    y2 = 6

    x3 = 3
    y3 = 8

   
    x4 = 4
    y4 = 6

    x5 = 6
    y5 = 6

    x6 = 7
    y6 = 8

    x7 = 8
    y7 = 6

    x8 = 8
    y8 = 2

    x9 = 7
    y9 = 1

    x10 = 3
    y10 = 1

    line = plt.Line2D([x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10],
                      [y0, y1, y2, y3, y4, y5 ,y6, y7, y8, y9, y10], color="r")
    axes.add_line(line)

def drawCircles(axes):

  circle1 = matplotlib.patches.Circle((6, 4), radius=0.5, fill=True, color="red")

  circle2 = matplotlib.patches.Circle((4, 4), radius=0.5, fill=True, color="red")


if __name__== "__main__":
    plt.xlim(0, 10)
    plt.ylim(0, 10)
    plt.grid()


    axes = plt.gca()
    axes.set_aspect("equal")

    drawLine(axes)
    drawCircles(axes)
    plt.show()